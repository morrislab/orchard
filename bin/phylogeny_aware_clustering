#############################################################################
# phylogeny_aware_clustering
#
# A Python program for inferring clones trees from a mutation tree
############################################################################# 
import argparse, os, sys  
import numpy as np 
from sklearn.metrics import pairwise_distances
from omicsdata.tree.parents import compute_partial_parents
from omicsdata.ssm import parse, supervariants
from omicsdata.npz.archive import Archive

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', "lib", "cluster")))
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', "metrics")))
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', "lib", "orchard")))

from constants import KEYS_ORCH_NPZ
import neutree

from pa_clustering import cluster
from utils import load_inputs, CLUSTERS_KEY, LLH_KEY, PARENTS_KEY, min_linkage, avg_linkage, MIN_LINKAGE, AVG_LINKAGE

# dictionary of linkage criterion functions
linkage_criterion = {MIN_LINKAGE:min_linkage, AVG_LINKAGE:avg_linkage}


def main():

    parser = argparse.ArgumentParser(
        description="The 'phylogeny-aware' clustering algorithm",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument("ssm_fn", type=str, help="Simple somatic mutation file (.ssm)")

    parser.add_argument("params_fn", type=str, help="Parameters file (.params.json)")

    parser.add_argument("input_fn", type=str, help="Either a omicsdata.npz.archive.Archive or a Neutree file containing tree structures")

    parser.add_argument("output_dir", type=str, help="Output directory")

    parser.add_argument("-i", "--tree-idx", type=int, default=0,
                    help="Index of tree information in neutree file to use for clustering.")

    parser.add_argument("-f", "--results-fn", type=str, default="clusters.npz",
                    help="File name for the zipped archive (npz) that stores all of the data about the phylogeny-aware clustering.")
    
    parser.add_argument("-l", "--linkage-criterion", type=str, default=MIN_LINKAGE, 
                        help="Agglomerative cluster linkage criterion", choices=list(linkage_criterion.keys()))

    parser.add_argument("-m", "--metric", type=str, default="euclidean", 
                        help="Metric for computing pairwise distances between rows in the cellular prevalence (F) matrix")

    args = parser.parse_args()

    # make sure we can write to the output directory
    if not os.path.isdir(args.output_dir):
        os.mkdir(args.output_dir)

    # extract data from input files
    variants = parse.load_ssm(args.ssm_fn)    
    params = parse.load_params(args.params_fn)

    structs, Fs = load_inputs(args.input_fn)
    assert args.tree_idx < len(structs), "File contains %d trees, but a tree_idx of %d was provided" % (len(structs), args.tree_idx)
    parents, F = structs[args.tree_idx], Fs[args.tree_idx]

    supervars = supervariants.clusters_to_supervars(params[KEYS_ORCH_NPZ.clusters_key], variants)
    superclusters = supervariants.make_superclusters(supervars)
    cluster_ids = [sv[0] for sv in superclusters]
   
    # compute pairwise distance matrix for rows in the F matrix
    pd_matrix = pairwise_distances(F, metric=args.metric)

    # initialize results data dictionary
    results_data = {PARENTS_KEY:[], LLH_KEY:[], CLUSTERS_KEY:[]}

    # run phylogeny-aware clustering
    llhs_, clusterings_, parents_ = cluster(supervars, 
                                            parents.copy(),
                                            pd_matrix, 
                                            cluster_ids,
                                            params[KEYS_ORCH_NPZ.clusters_key],
                                            linkage_func=linkage_criterion[args.linkage_criterion])

    # place results in dictionary
    results_data[PARENTS_KEY] = [compute_partial_parents(p).tolist() for p in parents_]
    results_data[LLH_KEY] = llhs_    
    results_data[CLUSTERS_KEY] = [[np.array(c).tolist() for c in clusters if len(c) != 0] for clusters in clusterings_]    

    # save zipped archive of results
    results_archive = Archive(os.path.join(args.output_dir, args.results_fn))
    for k,v in results_data.items():
        results_archive.add(k, v)

    results_archive.save()

if __name__ == '__main__':
    main()
